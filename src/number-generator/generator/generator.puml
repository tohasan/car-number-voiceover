@startuml

class Generator {
    + generate(facets: Facet[], requestedCount?: number): CarNumber[]
}

@enduml

@startuml(id=GeneratorPrivate)

!include generator.puml

class Generator {
    - logger: Logger
    - groupSimilarFacets(facets: Facet[]): Facet[][]
    - containsOnlyLetters(facet: Facet): boolean
    - containsOnlyDigits(facet: Facet): boolean
    - generateHigherOrderFacets(facetGroups: Facet[][]): HigherOrderFacet[]
    - cartesianProduct(facets: Facet[]): DisjointCombination[]
    - filterHigherOrderFacet(higherOrderFacet: HigherOrderFacet): HigherOrderFacet
    - isBlackListed(facet: Facet): boolean
    - isWhiteListed(facet: Facet, uniqueWhiteListedValues: Set<number>): boolean
    - hasUniqueDigits(facet: Facet, uniqueValuesPerDigitPos: Set<FacetValue>[]): [boolean, boolean[]]
    - hasUniqueSimilarSequence(facet: Facet, uniqueSimilarSequences: Set<string>): boolean
    - transformFacetWithTheNextValuesBeforeUniquePosition(facet: Facet, uniqueFlags: boolean[], uniqueValuesPerDigitPos: Set<FacetValue>[], pointerToTheNextPerDigitPos: number[]): Facet
    - calculateCombinationsLimit(facets: HigherOrderFacet[]): number
    - calculateRepresentativeCount(facets: HigherOrderFacet[]): number
    - provideInfoAboutRequestedCount(maxCount: number, representativeCount: number, requestedCount?: number): void
    - makeMix(facets: HigherOrderFacet[], offset: number): DisjointCombination[]
    - getMaxLength(facets: HigherOrderFacet[]): Max
    - calculateOffsetPerFacet(facets: HigherOrderFacet[], offset: number): number[]
}

@enduml

@startuml(id=PARTICIPANT)
participant Generator
@enduml